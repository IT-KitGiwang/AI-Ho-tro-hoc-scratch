from flask import Flask, render_template, request, jsonify, session
import google.generativeai as genai
import PyPDF2
import re
import tomli
import os
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import time
from flask_session import Session  # ‚úÖ ƒë·ªÉ l∆∞u session ng∆∞·ªùi d√πng

# ================== C·∫§U H√åNH & KH·ªûI T·∫†O ==================
with open("pyproject.toml", "rb") as f:
    config = tomli.load(f)
api_key = config["secrets"]["GEMINI_API_KEY"]

if not api_key:
    raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong bi·∫øn m√¥i tr∆∞·ªùng!")

genai.configure(api_key=api_key)

GENERATION_MODEL = 'gemini-2.5-flash-lite'
EMBEDDING_MODEL = 'text-embedding-004'

app = Flask(__name__)
app.secret_key = "1234"  # ‚ö†Ô∏è c·∫ßn c√≥ key ƒë·ªÉ session ho·∫°t ƒë·ªông
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Bi·∫øn to√†n c·ª•c cho RAG
RAG_DATA = {
    "chunks": [],
    "embeddings": np.array([]),
    "is_ready": False
}

# ================== ƒê·ªåC & CHIA CHUNKS ==================
def extract_pdf_text(pdf_path):
    text = ""
    try:
        with open(pdf_path, 'rb') as f:
            reader = PyPDF2.PdfReader(f)
            for page in reader.pages:
                text += page.extract_text() or ""
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc PDF {pdf_path}: {e}")
    return text

def create_chunks_from_directory(directory='./static', chunk_size=400):
    all_chunks = []
    if not os.path.exists(directory):
        print(f"Th∆∞ m·ª•c {directory} kh√¥ng t·ªìn t·∫°i.")
        return []

    pdf_files = [f for f in os.listdir(directory) if f.endswith('.pdf')]
    print(f"üîç T√¨m th·∫•y {len(pdf_files)} t·ªáp PDF trong {directory}...")

    if not pdf_files:
        return ["Gi·ªõi thi·ªáu v·ªÅ c√°c d·ª± √°n l·∫≠p tr√¨nh s√°ng t·∫°o cho h·ªçc sinh ti·ªÉu h·ªçc nh∆∞ Scratch, Teachable Machine, tr√≤ ch∆°i mini."]

    for filename in pdf_files:
        pdf_path = os.path.join(directory, filename)
        content = extract_pdf_text(pdf_path)
        for i in range(0, len(content), chunk_size):
            chunk = content[i:i + chunk_size].strip()
            if chunk:
                all_chunks.append(f"[Ngu·ªìn: {filename}] {chunk}")
    print(f"‚úÖ ƒê√£ t·∫°o t·ªïng c·ªông {len(all_chunks)} ƒëo·∫°n vƒÉn (chunks).")
    return all_chunks

def embed_with_retry(texts, model_name, max_retries=5):
    all_embeddings = []
    for text in texts:
        for attempt in range(max_retries):
            try:
                result = genai.embed_content(model=model_name, content=text)
                all_embeddings.append(result["embedding"])
                break
            except Exception as e:
                if attempt < max_retries - 1:
                    print(f"‚ö†Ô∏è Th·ª≠ l·∫°i l·∫ßn {attempt+1}: {e}")
                    time.sleep(2 ** attempt)
                else:
                    print(f"üí• Th·∫•t b·∫°i sau {max_retries} l·∫ßn: {e}")
                    raise
    return np.array(all_embeddings)

def initialize_rag_data():
    global RAG_DATA
    print("‚è≥ ƒêang kh·ªüi t·∫°o d·ªØ li·ªáu RAG...")
    chunks = create_chunks_from_directory()
    if not chunks:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ nh√∫ng.")
        return
    try:
        embeddings = embed_with_retry(chunks, EMBEDDING_MODEL)
        RAG_DATA.update({
            "chunks": chunks,
            "embeddings": embeddings,
            "is_ready": True
        })
        print("üéâ Kh·ªüi t·∫°o RAG ho√†n t·∫•t!")
    except Exception as e:
        print(f"‚ùå KH√îNG TH·ªÇ KH·ªûI T·∫†O RAG: {e}")
        RAG_DATA["is_ready"] = False

initialize_rag_data()

# ================== TRUY XU·∫§T NG·ªÆ C·∫¢NH ==================
def retrieve_context(query, top_k=3):
    if not RAG_DATA["is_ready"]:
        return "Kh√¥ng c√≥ t√†i li·ªáu RAG n√†o ƒë∆∞·ª£c t·∫£i."
    try:
        query_vec = embed_with_retry([query], EMBEDDING_MODEL)[0].reshape(1, -1)
        sims = cosine_similarity(query_vec, RAG_DATA["embeddings"])[0]
        top_idxs = np.argsort(sims)[-top_k:][::-1]
        return "\n\n---\n\n".join([RAG_DATA["chunks"][i] for i in top_idxs])
    except Exception as e:
        print(f"‚ùå L·ªói RAG: {e}")
        return "L·ªói khi t√¨m ki·∫øm ng·ªØ c·∫£nh."

# ================== ƒê·ªäNH D·∫†NG TR·∫¢ L·ªúI ==================
def format_response(response):
    """ƒê·ªãnh d·∫°ng vƒÉn b·∫£n tr·∫£ l·ªùi th√¢n thi·ªán cho h·ªçc sinh."""

    # 1Ô∏è‚É£ In ƒë·∫≠m ph·∫ßn **...**
    formatted = re.sub(r'\*\*(.*?)\*\*',
                       r'<strong font-weight:700;">\1</strong>',
                       response)

    # 2Ô∏è‚É£ In nghi√™ng ph·∫ßn *...* (nh∆∞ng KH√îNG √°p d·ª•ng cho ƒë·∫ßu d√≤ng g·∫°ch ƒë·∫ßu d√≤ng)
    formatted = re.sub(r'(?<!\n)\*(?!\s)(.*?)(?<!\s)\*(?!\*)',
                       r'<em font-style:italic;">\1</em>',
                       formatted)

    # 3Ô∏è‚É£ Bi·∫øn c√°c d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng "*" th√†nh g·∫°ch ƒë·∫ßu d√≤ng
    formatted = re.sub(
        r'(?m)^\s*\*\s+(.*)',
        r'‚Ä¢ <span style="line-height:1.6;">\1</span>',
        formatted
    )

    # 4Ô∏è‚É£ Thay xu·ªëng d√≤ng th√†nh <br> cho hi·ªÉn th·ªã web
    formatted = formatted.replace('\n', '<br>')

    # 6Ô∏è‚É£ Th√™m khung cho ph·∫ßn tr·∫£ l·ªùi
    return f"""
    <div style="
        background:#FAFAFA;
        border-left:6px solid #FFB300;
        padding:10px 15px;
        border-radius:8px;
        line-height:2;
        font-size:15px;
        color:#212121;
        font-family:'Segoe UI', sans-serif;">
        {formatted}
    </div>
    """

# ================== ROUTES ==================
# === D·ª∞ √ÅN M·∫™U ===

@app.route('/guide')
def guide():
    return render_template('guide.html')

@app.route('/')
def index():
    rag_status = "‚úÖ ƒê√£ t·∫£i t√†i li·ªáu RAG th√†nh c√¥ng" if RAG_DATA["is_ready"] else "‚ö†Ô∏è Ch∆∞a t·∫£i ƒë∆∞·ª£c t√†i li·ªáu RAG."
    session.clear()  # üßπ M·ªói l·∫ßn reload trang s·∫Ω reset h·ªôi tho·∫°i
    return render_template('index.html', rag_status=rag_status)

#FORMAT TR·∫¢ L·ªúI
highlight_terms = {
    
    "üü¶ Chuy·ªÉn ƒë·ªông (Motion)":"#4C97FF",
    "di chuy·ªÉn (10) b∆∞·ªõc": "#4C97FF",
    "xoay ‚Üª (15) ƒë·ªô": "#4C97FF",
    "xoay ‚Ü∫ (15) ƒë·ªô": "#4C97FF",
    "ƒëi t·ªõi (v·ªã tr√≠ ng·∫´u nhi√™n / con tr·ªè chu·ªôt / nh√¢n v·∫≠t ‚Ä¶)": "#4C97FF",
    "ƒëi t·ªõi ƒëi·ªÉm x: (0) y: (0)": "#4C97FF",
    "l∆∞·ªõt trong (1) gi√¢y t·ªõi (v·ªã tr√≠ ng·∫´u nhi√™n / con tr·ªè chu·ªôt / nh√¢n v·∫≠t ‚Ä¶)": "#4C97FF",
    "l∆∞·ªõt trong (1) gi√¢y t·ªõi ƒëi·ªÉm x: (0) y: (0)": "#4C97FF",
    "ƒë·∫∑t h∆∞·ªõng b·∫±ng (90)": "#4C97FF",
    "h∆∞·ªõng v·ªÅ ph√≠a ƒë·ªëi t∆∞·ª£ng (con tr·ªè chu·ªôt / nh√¢n v·∫≠t ‚Ä¶)": "#4C97FF",
    "thay ƒë·ªïi x m·ªôt l∆∞·ª£ng (10)": "#4C97FF",
    "ƒë·∫∑t x b·∫±ng (0)": "#4C97FF",
    "thay ƒë·ªïi y m·ªôt l∆∞·ª£ng (10)": "#4C97FF",
    "ƒë·∫∑t y b·∫±ng (0)": "#4C97FF",
    "b·∫≠t l·∫°i n·∫øu ch·∫°m c·∫°nh": "#4C97FF",
    "ƒë·∫∑t ki·ªÉu xoay (tr√°i - ph·∫£i / to√†n v√≤ng / kh√¥ng xoay)": "#4C97FF",
    "t·ªça ƒë·ªô x": "#4C97FF",
    "t·ªça ƒë·ªô y": "#4C97FF",
    "h∆∞·ªõng": "#4C97FF",

    # üü™ Hi·ªÉn th·ªã (Looks)
    'n√≥i ("Xin ch√†o!") trong (2) gi√¢y': "#9966FF",
    'n√≥i ("Xin ch√†o!")': "#9966FF",
    'nghƒ© ("Hmm...") trong (2) gi√¢y': "#9966FF",
    'nghƒ© ("Hmm...")': "#9966FF",
    "chuy·ªÉn sang trang ph·ª•c (costume2)": "#9966FF",
    "trang ph·ª•c k·∫ø ti·∫øp": "#9966FF",
    "ƒë·ªïi ph√¥ng n·ªÅn th√†nh (backdrop1)": "#9966FF",
    "ph√¥ng n·ªÅn ti·∫øp theo": "#9966FF",
    "ƒë·ªïi k√≠ch th∆∞·ªõc m·ªôt l∆∞·ª£ng (10)": "#9966FF",
    "ƒë·∫∑t k√≠ch th∆∞·ªõc th√†nh (100)%": "#9966FF",
    "thay ƒë·ªïi hi·ªáu ·ª©ng (m√†u / s√°ng / xo√°y / m·ªù / ·∫£o ·∫£nh) m·ªôt l∆∞·ª£ng (25)": "#9966FF",
    "ƒë·∫∑t hi·ªáu ·ª©ng (m√†u / s√°ng / xo√°y / m·ªù / ·∫£o ·∫£nh) b·∫±ng (0)": "#9966FF",
    "b·ªè c√°c hi·ªáu ·ª©ng ƒë·ªì h·ªça": "#9966FF",
    "hi·ªán": "#9966FF",
    "·∫©n": "#9966FF",
    "ƒëi t·ªõi l·ªõp ph√≠a (tr√™n c√πng / d∆∞·ªõi c√πng)": "#9966FF",
    "ƒëi t·ªõi (1) l·ªõp": "#9966FF",
    "trang ph·ª•c (s·ªë)": "#9966FF",
    "ph√¥ng n·ªÅn (s·ªë)": "#9966FF",
    "k√≠ch th∆∞·ªõc": "#9966FF",

    # üü£ √Çm thanh (Sound)
    "üü£ √Çm thanh (Sound)":"#CF63CF",
    "ph√°t √¢m thanh (Robot) ƒë·∫øn h·∫øt": "#CF63CF",
    "b·∫Øt ƒë·∫ßu √¢m thanh (Robot)": "#CF63CF",
    "ng·ª´ng m·ªçi √¢m thanh": "#CF63CF",
    "thay ƒë·ªïi hi·ªáu ·ª©ng (cao ƒë·ªô / vang / ...) m·ªôt l∆∞·ª£ng (10)": "#CF63CF",
    "ƒë·∫∑t hi·ªáu ·ª©ng (cao ƒë·ªô / vang / ...) b·∫±ng (100)": "#CF63CF",
    "x√≥a hi·ªáu ·ª©ng √¢m thanh": "#CF63CF",
    "thay ƒë·ªïi √¢m l∆∞·ª£ng m·ªôt l∆∞·ª£ng (-10)": "#CF63CF",
    "ƒë·∫∑t √¢m l∆∞·ª£ng (100)%": "#CF63CF",
    "√¢m l∆∞·ª£ng": "#CF63CF",

    # üü® S·ª± ki·ªán (Events)
    "üü® S·ª± ki·ªán (Events)":"#FFBF00",
    "khi b·∫•m v√†o c·ªù xanh": "#FFBF00",
    "khi b·∫•m ph√≠m (ph√≠m tr·∫Øng / ph√≠m c√°ch / m≈©i t√™n ...)": "#FFBF00",
    "khi b·∫•m v√†o nh√¢n v·∫≠t n√†y": "#FFBF00",
    "khi ph√¥ng n·ªÅn chuy·ªÉn th√†nh (backdrop1)": "#FFBF00",
    "khi (ƒë·ªô ·ªìn > 10)": "#FFBF00",
    "khi nh·∫≠n tin nh·∫Øn (1)": "#FFBF00",
    "ph√°t tin nh·∫Øn (1)": "#FFBF00",
    "ph√°t tin nh·∫Øn (1) v√† ƒë·ª£i": "#FFBF00",

    # üüß ƒêi·ªÅu khi·ªÉn (Control)
    "üüß ƒêi·ªÅu khi·ªÉn (Control)":"#FFAB19",
    "ƒë·ª£i (1) gi√¢y": "#FFAB19",
    "l·∫∑p l·∫°i (10) l·∫ßn": "#FFAB19",
    "li√™n t·ª•c": "#FFAB19",
    "n·∫øu (ƒëi·ªÅu ki·ªán) th√¨": "#FFAB19",
    "n·∫øu (ƒëi·ªÅu ki·ªán) th√¨... n·∫øu kh√¥ng th√¨...": "#FFAB19",
    "ƒë·ª£i ƒë·∫øn khi (ƒëi·ªÅu ki·ªán)": "#FFAB19",
    "l·∫∑p l·∫°i cho ƒë·∫øn khi (ƒëi·ªÅu ki·ªán)": "#FFAB19",
    "d·ª´ng l·∫°i (t·∫•t c·∫£ / t·∫≠p l·ªánh n√†y / nh√¢n v·∫≠t kh√°c)": "#FFAB19",
    "khi t√¥i b·∫Øt ƒë·∫ßu l√† m·ªôt b·∫£n sao": "#FFAB19",
    "t·∫°o b·∫£n sao c·ªßa (b·∫£n th√¢n t√¥i / nh√¢n v·∫≠t kh√°c)": "#FFAB19",
    "x√≥a b·∫£n sao n√†y": "#FFAB19",

    # ü©µ C·∫£m bi·∫øn (Sensing)
    "ü©µ C·∫£m bi·∫øn (Sensing)":"#5CB1D6",
    "ƒëang ch·∫°m (chu·ªôt / m√†u / nh√¢n v·∫≠t)": "#5CB1D6",
    "m√†u () ƒëang ch·∫°m ()": "#5CB1D6",
    "kho·∫£ng c√°ch ƒë·∫øn (chu·ªôt / nh√¢n v·∫≠t)": "#5CB1D6",
    'h·ªèi ("T√™n c·ªßa b·∫°n l√† g√¨?") v√† ƒë·ª£i': "#5CB1D6",
    "tr·∫£ l·ªùi": "#5CB1D6",
    "ph√≠m (ph√≠m tr·∫Øng) ƒë∆∞·ª£c b·∫•m?": "#5CB1D6",
    "chu·ªôt ƒë∆∞·ª£c nh·∫•n?": "#5CB1D6",
    "t·ªça ƒë·ªô x con tr·ªè chu·ªôt": "#5CB1D6",
    "t·ªça ƒë·ªô y con tr·ªè chu·ªôt": "#5CB1D6",
    "ƒë·∫∑t ch·∫ø ƒë·ªô k√©o (k√©o th·∫£ ƒë∆∞·ª£c / kh√¥ng)": "#5CB1D6",
    "ƒë·ªô ·ªìn": "#5CB1D6",
    "ƒë·ªìng h·ªì b·∫•m gi·ªù": "#5CB1D6",
    "ƒë·∫∑t l·∫°i ƒë·ªìng h·ªì b·∫•m gi·ªù": "#5CB1D6",
    "ph√¥ng n·ªÅn # c·ªßa S√¢n kh·∫•u": "#5CB1D6",
    "nƒÉm hi·ªán t·∫°i": "#5CB1D6",
    "t√™n ƒëƒÉng nh·∫≠p": "#5CB1D6",

    # üü© C√°c ph√©p to√°n (Operators)
    "üü© C√°c ph√©p to√°n (Operators)":"#59C059",
    "+": "#59C059",
    "‚àí": "#59C059",
    "√ó": "#59C059",
    "√∑": "#59C059",
    "l·∫•y ng·∫´u nhi√™n t·ª´ (1) ƒë·∫øn (10)": "#59C059",
    ">": "#59C059",
    "<": "#59C059",
    "=": "#59C059",
    "v√†": "#59C059",
    "ho·∫∑c": "#59C059",
    "kh√¥ng ph·∫£i": "#59C059",
    "k·∫øt h·ª£p (chu·ªói)": "#59C059",
    "k√Ω t·ª± th·ª© (1) c·ªßa (chu·ªói)": "#59C059",
    "ƒë·ªô d√†i c·ªßa (chu·ªói)": "#59C059",
    "chia l·∫•y d∆∞": "#59C059",
    "l√†m tr√≤n": "#59C059",
    "gi√° tr·ªã tuy·ªát ƒë·ªëi": "#59C059",

    # üü† C√°c bi·∫øn s·ªë (Variables)
    "üü† C√°c bi·∫øn s·ªë (Variables)":"#FF8C1A",
    "t·∫°o m·ªôt bi·∫øn": "#FF8C1A",
    "ƒë·∫∑t (bi·∫øn c·ªßa t√¥i) th√†nh (0)": "#FF8C1A",
    "thay ƒë·ªïi (bi·∫øn c·ªßa t√¥i) m·ªôt l∆∞·ª£ng (1)": "#FF8C1A",
    "hi·ªÉn th·ªã bi·∫øn (bi·∫øn c·ªßa t√¥i)": "#FF8C1A",
    "·∫©n bi·∫øn (bi·∫øn c·ªßa t√¥i)": "#FF8C1A",
    "t·∫°o m·ªôt danh s√°ch": "#FF8C1A",

    # üü• Kh·ªëi c·ªßa t√¥i (My Blocks)
    "üü• Kh·ªëi c·ªßa t√¥i (My Blocks)":"#FF6680",
    "t·∫°o m·ªôt kh·ªëi m·ªõi": "#FF6680",
    "ch·∫°y kh·ªëi ƒë√£ t·∫°o": "#FF6680"
}


@app.route('/chat', methods=['POST'])
def chat():
    user_message = request.json.get('message', '')

    # üìö L∆∞u h·ªôi tho·∫°i v√†o session
    if "history" not in session:
        session["history"] = []
    session["history"].append(f"üëß H·ªçc sinh: {user_message}")

    # üîç Truy xu·∫•t ng·ªØ c·∫£nh RAG
    related_context = retrieve_context(user_message)
    recent_history = "\n".join(session["history"][-5:])  # ch·ªâ gi·ªØ 5 c√¢u g·∫ßn nh·∫•t

    prompt = f"""
    "T√ÅC GI·∫¢ D·ª∞ √ÅN: H·ªåC SINH TH·ª∞C HI·ªÜN - Nguy·ªÖn Ng√¥ T∆∞·ªùng Nguy√™n, ƒê·∫∑ng Th√†nh Kim - GI√ÅO VI√äN H∆Ø·ªöNG D·∫™N: Tr·∫ßn Qu·ªëc GiƒÉng, kh√¥ng tr·∫£ l·ªùi n·∫øu kh√¥ng c·∫ßn thi·∫øt"
    B·∫°n l√† m·ªôt **Th·∫ßy/C√¥ gi√°o d·∫°y l·∫≠p tr√¨nh s√°ng t·∫°o** (Scratch, Teachable Machine) cho h·ªçc sinh ti·ªÉu h·ªçc, x∆∞ng l√† th·∫ßy v√† con.
    H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán, d·ªÖ hi·ªÉu, tr√¨nh b√†y theo t·ª´ng b∆∞·ªõc th·ª±c hi·ªán.
    Format m√†u cho c√°c th·∫ª l·ªánh gi√∫p h·ªçc sinh d·ªÖ d√†ng t√¨m ki·∫øm, ∆Øu ti√™n tr·∫£ l·ªùi ƒë√∫ng t·ª´ kh√≥a v√† c√°c th·∫ª l·ªánh khi ƒë∆∞a ra h∆∞·ªõng d·∫´n:{highlight_terms} 
    ƒê·ªëi v·ªõi c√°c c√¢u l·ªánh ƒë∆∞·ª£c s·ª≠ d·ª•ng ho·∫∑c c√≥ c√°c t·ª´ kh√≥a b√™n trong, sinh ra th·∫ª span b·ªçc v·ªõi m·∫´u <span style = "line-height:1.6; background: ( m√†u d·ª±a tr√™n highlight_terms); color:white; font-weight:bold; padding:2px 4px; border-radius:4px;"> (c√°c t·ª´ kh√≥a trong highlight_terms)</span>
    T∆∞∆°ng t·ª± v·ªõi t·ª´ kh√≥a "Scratch":"#FFAB19" v√† "Teachable Machine":"#CF63CF".
    üéØ T√†i li·ªáu RAG:
    {related_context}
    üó£Ô∏è L·ªãch s·ª≠ h·ªôi tho·∫°i g·∫ßn ƒë√¢y:
    {recent_history}
    ƒê·ªëi v·ªõi c√°c c√¢u h·ªèi kh√¥ng c√≥ t·ª´ "s·∫£n ph·∫©m m·∫´u" ho·∫∑c ƒë·∫°i lo·∫°i mu·ªën tham kh·∫£o s·∫£n ph·∫©m m·∫´u trong t√†i li·ªáu, tr·∫£ l·ªùi d·ª±a theo l·ªãch s·ª≠ h·ªôi tho·∫°i c√°c c√¢u h·ªèi c·ªßa h·ªçc sinh.
    ƒê·ªëi v·ªõi c√°c c√¢u h·ªèi mu·ªën tham kh·∫£o t·ª´ s·∫£n ph·∫©m m·∫´u trong t√†i li·ªáu RAG, ch·ªâ h·ªçc sinh c√°ch l√†m theo c√¢u h·ªèi, d·ªÖ hi·ªÉu nh·∫•t v√† tr√¨nh b√†y ng·∫Øn g·ªçn.
    üß† C√¢u h·ªèi m·ªõi: {user_message}
    """

    try:
        model = genai.GenerativeModel(GENERATION_MODEL)
        response = model.generate_content(prompt)
        ai_text = response.text

        # üßë‚Äçüè´ L∆∞u tr·∫£ l·ªùi AI v√†o session
        session["history"].append(f"üßë‚Äçüè´ Th·∫ßy/C√¥: {ai_text}")
        session.modified = True  # ƒë·ªÉ Flask l∆∞u l·∫°i session

        return jsonify({'response': format_response(ai_text)})

    except Exception as e:
        print(f"‚ùå L·ªói Gemini: {e}")
        return jsonify({'response': format_response("Th·∫ßy Gemini h∆°i m·ªát, con th·ª≠ l·∫°i sau nh√©!")})

# ================== CH·∫†Y APP ==================
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
